repeat
    task.wait()
until game:IsLoaded()
task.wait()
local a = {}
if game.PlaceId == 3260590327 and not getgenv().ExecutedAlr or game.PlaceId == 5591597781 and not getgenv().ExecutedAlr then
    local function b(c)
        if getgenv().PrintAllActions or getgenv().Debug then
            print(c)
        end
    end
    if not getexecutorname then
        function getexecutorname()
            return "Other"
        end
    elseif not string.find(getexecutorname(), "ScriptWare") then
        function getexecutorname()
            return "Other"
        end
    end
    local d = game.Players.LocalPlayer.UserId
    fileprefix = "TDS_AutoStrat/"
    if syn and not getgenv().IsMultiStrat and not getgenv().ExecDis and not getgenv().Multiplayer then
        syn.queue_on_teleport('loadstring(readfile("TDS_AutoStrat/LastStrat_' .. d .. '.txt"))()')
    elseif not getgenv().IsMultiStrat and not getgenv().ExecDis and not getgenv().Multiplayer then
        queue_on_teleport('loadstring(readfile("TDS_AutoStrat/LastStrat_' .. d .. '.txt"))()')
    end
    getgenv().ExecutedAlr = true
    getgenv().MapUsed = false
    loadstring(
        game:HttpGet(
            "https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/sjkdkjlfdjnnmklcvxjNotifCr"
        )
    )()
    if isfile("DNR.txt") and not isfolder("TDS_AutoStrat") then
        say("ERROR", "Root folder removed, recreating files!", 5)
        makefolder("TDS_AutoStrat")
        writefile(fileprefix .. "Webhook (Logs).txt", "WEBHOOK HERE")
        writefile(fileprefix .. "Webhook (Ping).txt", "WEBHOOK HERE")
        writefile(fileprefix .. "LastLog.txt", "")
        writefile(fileprefix .. "LastPrintLog.txt", "")
        writefile(fileprefix .. "LastStrat_" .. d .. ".txt", "")
        writefile(fileprefix .. "PrivateServer.txt", "PRIVATE SERVER LINK HERE")
        writefile(fileprefix .. "UseCount.txt", readfile("DNR.txt"))
        task.wait(0.5)
        say("SUCCESS", "Files recreated! Don't remove this folder again!", 5)
    end
    b("Files recreted function passed")
    if not isfolder("TDS_AutoStrat") then
        makefolder("TDS_AutoStrat")
    end
    if not isfile("DNR.txt") then
        writefile("DNR.txt", "1")
    end
    if not isfile(fileprefix .. "UseCount.txt") then
        writefile(fileprefix .. "UseCount.txt", "1")
    end
    b("Createed more file")
    loadstring(
        game:HttpGet("https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/ikcxujvkdsStrat")
    )()
    loadstring(game:HttpGet("https://banbusscripts.netlify.app/Scripts/IsAutoStratMain"))()
    function isgame()
        if game.PlaceId == 5591597781 then
            return true
        else
            return false
        end
    end
    if not isgame() then
        repeat
            task.wait(1)
        until game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Session", "Search", "Login").Time
        if
            os.time() -
                game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Session", "Search", "Login").Time >=
                86400
         then
            game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Login", "Claim")
            game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Session", "Search", "Login")
        end
    end
    if getgenv().StratMaintance == true then
        if isgame() and getgenv().SkipStratMaintance ~= true then
            game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
        end
        repeat
            task.wait()
            loadstring(game:HttpGet("https://banbusscripts.netlify.app/Scripts/IsAutoStratMain"))()
            getgenv().status = "Script in maintenance, waiting..."
            task.wait(1)
        until getgenv().StratMaintance == false or getgenv().SkipStratMaintance == true
        if getgenv().StratMaintance == false then
            game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
        end
    end
    getgenv().status = "Loading"
    b("Status loading set")
    spawn(
        function()
            if not isgame() then
                task.wait(60)
                if not getgenv().Multiplayer then
                    if
                        getgenv().status == "Loading" or getgenv().status == "Loadout Equipped" or
                            getgenv().status == "Equipping Loadout..."
                     then
                        game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
                    end
                end
            end
        end
    )
    b("Stuck check online")
    local e = readfile(fileprefix .. "UseCount.txt")
    if not tonumber(e) then
        e = 1
    end
    e = tonumber(e) + 1
    writefile(fileprefix .. "UseCount.txt", tostring(e))
    writefile("DNR.txt", tostring(e))
    local f = nil
    local g = game:WaitForChild("ReplicatedStorage")
    local h = g:WaitForChild("RemoteFunction")
    local i = g:WaitForChild("RemoteEvent")
    stateRep = nil
    if isgame() then
        function getStateRep()
            for j, k in pairs(game:GetService("ReplicatedStorage").StateReplicators:GetChildren()) do
                if k:GetAttribute("TimeScale") then
                    return k
                end
            end
        end
        repeat
            stateRep = getStateRep()
        until stateRep
    end
    b("Got staterep")
    spawn(
        function()
            if isgame() then
                game.Players.ChildAdded:Connect(
                    function()
                        if #game.Players:GetChildren() > 1 and not getgenv().Multiplayer then
                            game:GetService("TeleportService"):Teleport(
                                3260590327,
                                game:GetService("Players").LocalPlayer
                            )
                        end
                    end
                )
            end
        end
    )
    b("More players check online")
    spawn(
        function()
            task.wait(10)
            if isgame() and #game.Players:GetChildren() > 1 and not getgenv().Multiplayer then
                game:GetService("TeleportService"):Teleport(3260590327, game:GetService("Players").LocalPlayer)
            else
                if
                    isgame() and getgenv().Multiplayer and #game.Players:GetChildren() > getgenv().PlayerNumber and
                        getgenv().PlayerType == "Host"
                 then
                    local l = math.huge
                    local m = game:GetService("HttpService")
                    local n = game:GetService("TeleportService")
                    local o, p
                    local q = math.huge
                    local r = 0
                    repeat
                        local s =
                            "https://games.roblox.com/v1/games/" ..
                            game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                        if o then
                            s = s .. "&cursor=" .. o
                        end
                        local t = m:JSONDecode(game:HttpGet(s))
                        if t then
                            o = t.nextPageCursor or nil
                            r = r + 1
                            for u, k in pairs(t.data) do
                                k.playing = k.playing or math.huge
                                k.id = k.id or ""
                                if k.id ~= game.JobId and k.playing <= q then
                                    q = k.playing
                                    p = k.id
                                end
                            end
                        end
                    until not o or r >= l
                    if p then
                        getgenv().Connection:Send(
                            '{"client":"Host","action":"Teleport","jobid":"' ..
                                p ..
                                    '","userId":' ..
                                        game.Players.LocalPlayer.UserId ..
                                            ',"playerTwoId":' ..
                                                getgenv().Player2Id ..
                                                    ',"playerThreeId":' ..
                                                        getgenv().Player3Id ..
                                                            ',"playerFourId":' .. getgenv().Player4Id .. "}"
                        )
                        n:TeleportToPlaceInstance(3260590327, p)
                    end
                end
            end
        end
    )
    b("Multiplayer check online")
    if isgame() and getgenv().PotatoPC then
        spawn(
            function()
                task.wait(3)
                for j, k in pairs(game.Workspace.Map:GetChildren()) do
                    if k.Name ~= "Paths" then
                        k:Remove()
                    end
                end
                local v = game.Workspace.Terrain
                v.Transparency = 0
                v.WaterReflectance = 0
                v.WaterTransparency = 0
                v.WaterWaveSize = 0
                v.WaterWaveSpeed = 0
            end
        )
    elseif not isgame() and getgenv().PotatoPC then
        spawn(
            function()
                task.wait(3)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0, -85, 0)
                game.Workspace.Lobby:Remove()
                local v = game.Workspace.Terrain
                v.Transparency = 0
                v.WaterReflectance = 0
                v.WaterTransparency = 0
                v.WaterWaveSize = 0
                v.WaterWaveSpeed = 0
            end
        )
    end
    b("Potato pc loaded")
    if isgame() then
        spawn(
            function()
                task.wait(3)
                for j, k in pairs(game:GetService("Lighting"):GetChildren()) do
                    if k.Name ~= "Sky" then
                        k:Remove()
                    end
                end
                game.Lighting.FogStart = 10000000
                game.Lighting.FogEnd = 10000000
                game.Lighting.Brightness = 1
                local w
                if getgenv().CameraSys == true then
                    w =
                        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame +
                        Vector3.new(0, 50, 0)
                else
                    w =
                        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame +
                        Vector3.new(0, 20, 0)
                end
                local x = Instance.new("Part")
                x.Transparency = 1
                x.Anchored = true
                getgenv().nameBlock = ""
                for e = 1, 10 do
                    getgenv().nameBlock = getgenv().nameBlock .. tostring(math.random(1, 9))
                end
                x.Name = getgenv().nameBlock
                x.CanCollide = true
                x.Parent = game.Workspace
                x.CFrame = w
                if getgenv().CameraSys == true then
                    game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame =
                        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame +
                        Vector3.new(0, 55, 0)
                else
                    game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame =
                        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame +
                        Vector3.new(0, 25, 0)
                end
                if game.CoreGui:FindFirstChild("AutoStratsLogger") then
                    game.CoreGui:FindFirstChild("AutoStratsLogger"):Remove()
                end
                local y = Instance.new("ScreenGui")
                local z = Instance.new("Frame")
                local A = Instance.new("ImageLabel")
                local B = Instance.new("Frame")
                local C = Instance.new("TextLabel")
                local D = Instance.new("ScrollingFrame")
                y.Name = "AutoStratsLogger"
                y.Parent = game:WaitForChild("CoreGui")
                y.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                z.Name = "Main"
                z.Parent = y
                z.BackgroundColor3 = Color3.fromRGB(23, 21, 30)
                z.BorderSizePixel = 0
                z.Position = UDim2.new(0.544935644, 0, 0.355803162, 0)
                z.Size = UDim2.new(0, 500, 0, 400)
                A.Name = "Glow"
                A.Parent = z
                A.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                A.BackgroundTransparency = 1.000
                A.BorderSizePixel = 0
                A.Position = UDim2.new(0, -15, 0, -15)
                A.Size = UDim2.new(1, 30, 1, 30)
                A.ZIndex = 0
                A.Image = "rbxassetid://4996891970"
                A.ImageColor3 = Color3.fromRGB(15, 15, 15)
                A.ScaleType = Enum.ScaleType.Slice
                A.SliceCenter = Rect.new(20, 20, 280, 280)
                B.Name = "Top_Container"
                B.Parent = z
                B.AnchorPoint = Vector2.new(0.5, 0)
                B.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                B.BackgroundTransparency = 1.000
                B.Position = UDim2.new(0.5, 0, 0, 18)
                B.Size = UDim2.new(1, -40, 0, 20)
                C.Name = "Title"
                C.Parent = B
                C.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                C.BackgroundTransparency = 1.000
                C.Position = UDim2.new(0.00764120743, 0, -0.400000006, 0)
                C.Size = UDim2.new(0.981785059, 0, 1.45000005, 0)
                C.Font = Enum.Font.GothamBlack
                C.Text = "AUTOSTRATS LOGGER"
                C.TextColor3 = Color3.fromRGB(255, 255, 255)
                C.TextSize = 30.000
                C.TextXAlignment = Enum.TextXAlignment.Left
                D.Name = "Scroll"
                D.Parent = z
                D.Active = true
                D.AnchorPoint = Vector2.new(0.5, 0)
                D.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                D.BackgroundTransparency = 1.000
                D.BorderSizePixel = 0
                D.Position = UDim2.new(0.5, 4, 0, 59)
                D.Size = UDim2.new(1, -20, 1, -67)
                D.BottomImage = "rbxassetid://5234388158"
                D.CanvasSize = UDim2.new(200, 0, 100, 0)
                D.MidImage = "rbxassetid://5234388158"
                D.ScrollBarThickness = 8
                D.TopImage = "rbxassetid://5234388158"
                D.VerticalScrollBarInset = Enum.ScrollBarInset.Always
                D.ChildAdded:Connect(
                    function()
                        if #D:GetChildren() > 16 then
                            D.CanvasPosition = Vector2.new(0, D.CanvasPosition.Y + 20)
                        end
                    end
                )
                local function E()
                    local F = Instance.new("LocalScript", z)
                    F.Name = "Dragify"
                    local G = game:GetService("UserInputService")
                    function dragify(H)
                        dragToggle = nil
                        dragInput = nil
                        dragStart = nil
                        local I = nil
                        function updateInput(J)
                            local K = J.Position - dragStart
                            local L =
                                UDim2.new(
                                startPos.X.Scale,
                                startPos.X.Offset + K.X,
                                startPos.Y.Scale,
                                startPos.Y.Offset + K.Y
                            )
                            game:GetService("TweenService"):Create(H, TweenInfo.new(0.1), {Position = L}):Play()
                        end
                        H.InputBegan:Connect(
                            function(J)
                                if
                                    (J.UserInputType == Enum.UserInputType.MouseButton1 or
                                        J.UserInputType == Enum.UserInputType.Touch) and
                                        G:GetFocusedTextBox() == nil
                                 then
                                    dragToggle = true
                                    dragStart = J.Position
                                    startPos = H.Position
                                    J.Changed:Connect(
                                        function()
                                            if J.UserInputState == Enum.UserInputState.End then
                                                dragToggle = false
                                            end
                                        end
                                    )
                                end
                            end
                        )
                        H.InputChanged:Connect(
                            function(J)
                                if
                                    J.UserInputType == Enum.UserInputType.MouseMovement or
                                        J.UserInputType == Enum.UserInputType.Touch
                                 then
                                    dragInput = J
                                end
                            end
                        )
                        game:GetService("UserInputService").InputChanged:Connect(
                            function(J)
                                if J == dragInput and dragToggle then
                                    updateInput(J)
                                end
                            end
                        )
                    end
                    dragify(F.Parent)
                end
                E()
                local function M()
                    local F = Instance.new("LocalScript", z)
                    F.Name = "Positioning"
                    F.Parent:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quad", 1)
                    F.Parent.Draggable = true
                end
                M()
                local N = -0.0073
                writefile(fileprefix .. "LastLog.txt", "--[START OF LOG]--")
                function TimeConverter(k)
                    if k <= 9 then
                        local conv = "0" .. k
                        return conv
                    else
                        return k
                    end
                end
                getgenv().output = function(O, P)
                    local Q = os.date("*t")["hour"]
                    local R = os.date("*t")["min"]
                    local S = os.date("*t")["sec"]
                    local T = Color3.fromRGB(255, 255, 255)
                    if P then
                        T = P
                    end
                    local U = Instance.new("TextLabel", D)
                    U.Text = "[" .. TimeConverter(Q) .. ":" .. TimeConverter(R) .. ":" .. TimeConverter(S) .. "] " .. O
                    appendfile(
                        fileprefix .. "LastLog.txt",
                        "\n[" .. TimeConverter(Q) .. ":" .. TimeConverter(R) .. ":" .. TimeConverter(S) .. "] " .. O
                    )
                    U.Size = UDim2.new(0.005, 0, 0.001, 0)
                    U.Position = UDim2.new(0, 0, .007 + N, 0)
                    U.Font = Enum.Font.SourceSansSemibold
                    U.TextColor3 = T
                    U.TextStrokeTransparency = 0
                    U.BackgroundTransparency = 1
                    U.BackgroundColor3 = Color3.new(0, 0, 0)
                    U.BorderSizePixel = 0
                    U.BorderColor3 = Color3.new(0, 0, 0)
                    U.FontSize = "Size14"
                    U.TextXAlignment = Enum.TextXAlignment.Left
                    U.ClipsDescendants = true
                    N = N + 0.0005
                end
                spawn(
                    function()
                        local V = false
                        V = not V
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid").PlatformStand = true
                        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = true
                        SprintKey = Enum.KeyCode.LeftShift
                        localPlayer = game.Players.LocalPlayer
                        Camera = game.Workspace.CurrentCamera
                        Mouse = localPlayer:GetMouse()
                        UserInputService = game:GetService("UserInputService")
                        movePosition = Vector2.new(0, 0)
                        moveDirection = Vector3.new(0, 0, 0)
                        targetMovePosition = movePosition
                        lastRightButtonDown = Vector2.new(0, 0)
                        rightMouseButtonDown = false
                        targetFOV = 70
                        sprinting = false
                        sprintingSpeed = 3
                        keysDown = {}
                        moveKeys = {
                            [Enum.KeyCode.D] = Vector3.new(1, 0, 0),
                            [Enum.KeyCode.A] = Vector3.new(-1, 0, 0),
                            [Enum.KeyCode.S] = Vector3.new(0, 0, 1),
                            [Enum.KeyCode.W] = Vector3.new(0, 0, -1),
                            [Enum.KeyCode.E] = Vector3.new(0, 1, 0),
                            [Enum.KeyCode.Q] = Vector3.new(0, -1, 0)
                        }
                        Tween = function(W, X, Y)
                            if Y == 1 then
                                return X
                            else
                                if tonumber(W) then
                                    return W * (1 - Y) + X * Y
                                else
                                    return W:Lerp(X, Y)
                                end
                            end
                        end
                        ClampVector3 = function(Z, _, a0)
                            return Vector3.new(
                                math.clamp(Z.X, _.X, a0.X),
                                math.clamp(Z.Y, _.Y, a0.Y),
                                math.clamp(Z.Z, _.Z, a0.Z)
                            )
                        end
                        UserInputService.InputChanged:connect(
                            function(a1)
                                if a1.UserInputType == Enum.UserInputType.MouseMovement then
                                    movePosition = movePosition + Vector2.new(a1.Delta.x, a1.Delta.y)
                                end
                            end
                        )
                        CalculateMovement = function()
                            local a2 = Vector3.new(0, 0, 0)
                            for j, k in pairs(keysDown) do
                                a2 = a2 + (moveKeys[j] or Vector3.new(0, 0, 0))
                            end
                            return a2
                        end
                        Round = function(a3, a4)
                            return math.floor(a3 / a4 + .5) * a4
                        end
                        Input = function(J, a5)
                            if moveKeys[J.KeyCode] then
                                if J.UserInputState == Enum.UserInputState.Begin then
                                    keysDown[J.KeyCode] = true
                                elseif J.UserInputState == Enum.UserInputState.End then
                                    keysDown[J.KeyCode] = nil
                                end
                            else
                                if J.UserInputState == Enum.UserInputState.Begin then
                                    if J.UserInputType == Enum.UserInputType.MouseButton2 and V == true then
                                        rightMouseButtonDown = true
                                        lastRightButtonDown = Vector2.new(Mouse.X, Mouse.Y)
                                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                                    elseif J.KeyCode == Enum.KeyCode.Z then
                                        targetFOV = 20
                                    elseif J.KeyCode == SprintKey then
                                        sprinting = true
                                    end
                                else
                                    if J.UserInputType == Enum.UserInputType.MouseButton2 then
                                        rightMouseButtonDown = false
                                        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
                                    elseif J.KeyCode == Enum.KeyCode.Z then
                                        targetFOV = 70
                                    elseif J.KeyCode == SprintKey then
                                        sprinting = false
                                    end
                                end
                            end
                        end
                        Mouse.WheelForward:connect(
                            function()
                                Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(0, 0, -5)
                            end
                        )
                        Mouse.WheelBackward:connect(
                            function()
                                Camera.CoordinateFrame = Camera.CoordinateFrame * CFrame.new(-0, 0, 5)
                            end
                        )
                        UserInputService.InputBegan:connect(Input)
                        UserInputService.InputEnded:connect(Input)
                        game:GetService("RunService").RenderStepped:Connect(
                            function()
                                if V then
                                    local a6 = Mouse.Hit
                                    targetMovePosition = movePosition
                                    Camera.CoordinateFrame =
                                        CFrame.new(Camera.CoordinateFrame.p) *
                                        CFrame.fromEulerAnglesYXZ(
                                            -targetMovePosition.Y / 300,
                                            -targetMovePosition.X / 300,
                                            0
                                        ) *
                                        CFrame.new(CalculateMovement() * (({[true] = sprintingSpeed})[sprinting] or .5))
                                    Camera.FieldOfView = Tween(Camera.FieldOfView, targetFOV, .5)
                                    if rightMouseButtonDown then
                                        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCurrentPosition
                                        movePosition =
                                            movePosition - (lastRightButtonDown - Vector2.new(Mouse.X, Mouse.Y))
                                        lastRightButtonDown = Vector2.new(Mouse.X, Mouse.Y)
                                    end
                                end
                            end
                        )
                        local a7 = 2
                        if getgenv().DefaultCam ~= nil then
                            a7 = getgenv().DefaultCam
                        end
                        local a8 =
                            loadstring(
                            game:HttpGet(
                                "https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/jsdnfjdsfdjnsmvkjhlkslzLIB",
                                true
                            )
                        )()
                        local a9 = a8:CreateWindow("Camera")
                        a9:Button(
                            "Normal",
                            function()
                                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                                game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = false
                                game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
                                game.Workspace.CurrentCamera.CameraType = "Follow"
                                a7 = 1
                            end
                        )
                        a9:Button(
                            "Follow Enemies (Default)",
                            function()
                                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
                                game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = true
                                game.Workspace.CurrentCamera.CameraType = "Follow"
                                a7 = 2
                            end
                        )
                        a9:Button(
                            "Free Cam",
                            function()
                                a7 = 3
                                Camera.CameraType = Enum.CameraType.Scriptable
                                game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = true
                                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
                            end
                        )
                        while task.wait() do
                            if a7 == 1 then
                                V = false
                                game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
                                game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Anchored = false
                            elseif a7 == 2 then
                                pcall(
                                    function()
                                        V = false
                                        local aa = game:GetService("Workspace").NPCs:GetChildren()
                                        if #aa ~= 0 then
                                            for j, k in pairs(game.Workspace.NPCs:GetChildren()) do
                                                if k:WaitForChild("HumanoidRootPart").CFrame.Y > -5 then
                                                    game.Workspace.Camera.CameraSubject = k.HumanoidRootPart
                                                    task.wait()
                                                    break
                                                else
                                                    game.Workspace.Camera.CameraSubject =
                                                        game:GetService("Workspace").Map.Paths["1"]["1"]
                                                    break
                                                end
                                            end
                                        else
                                            game.Workspace.Camera.CameraSubject =
                                                game:GetService("Workspace").Map.Paths["1"]["1"]
                                        end
                                    end
                                )
                            elseif a7 == 3 then
                                V = true
                            end
                        end
                    end
                )
            end
        )
    end
    b("Logger loaded")
    spawn(
        function()
            if isgame() and getgenv().Debug then
                game.Workspace.Towers.ChildAdded:Connect(
                    function(k)
                        repeat
                            task.wait()
                        until tonumber(k.Name)
                        local ab = Instance.new("BillboardGui")
                        ab.Parent = k:WaitForChild("HumanoidRootPart")
                        ab.Adornee = k:WaitForChild("HumanoidRootPart")
                        ab.StudsOffsetWorldSpace = Vector3.new(0, 2, 0)
                        ab.Size = UDim2.new(0, 250, 0, 50)
                        ab.AlwaysOnTop = true
                        local ac = Instance.new("TextLabel")
                        ac.Parent = ab
                        ac.BackgroundTransparency = 1
                        ac.Text = k.Name
                        ac.Font = "Legacy"
                        ac.Size = UDim2.new(1, 0, 0, 70)
                        ac.TextSize = 52
                        ac.TextScaled = fals
                        ac.TextColor3 = Color3.new(0, 0, 0)
                        ac.TextStrokeColor3 = Color3.new(0, 0, 0)
                        ac.TextStrokeTransparency = 0.5
                        local ac = Instance.new("TextLabel")
                        ac.Parent = ab
                        ac.BackgroundTransparency = 1
                        ac.Text = k.Name
                        ac.Font = "Legacy"
                        ac.Size = UDim2.new(1, 0, 0, 70)
                        ac.TextSize = 50
                        ac.TextScaled = false
                        ac.TextColor3 = Color3.new(1, 0, 0)
                        ac.TextStrokeColor3 = Color3.new(0, 0, 0)
                        ac.TextStrokeTransparency = 0.5
                    end
                )
            end
        end
    )
    getgenv().actionsUsed = 0
    getgenv().actionsSupposedToBeUsed = 0
    b("Debug mode loaded")
    if not isgame() then
        h:InvokeServer("Login", "Claim")
        h:InvokeServer("Session", "Search", "Login")
        if getgenv().AutoBuy then
            getgenv().status = "Buying crates..."
            local ad = require(game:GetService("ReplicatedStorage").Assets.Crates[getgenv().Crate].Data)
            local ae, af = ad.Price.Type, ad.Price.Value
            if ae == "Coins" then
                ltimes = math.floor(game.Players.LocalPlayer.Coins.Value / af)
                if ltimes ~= 0 then
                    for e = 1, ltimes do
                        h:InvokeServer("Shop", "Purchase", {["Name"] = getgenv().Crate, ["Type"] = "Crate"})
                        print("Bought " .. getgenv().Crate .. " Crate")
                        task.wait(1)
                        table1 = {}
                        for ag, ah in next, game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(
                            "Inventory",
                            "Execute",
                            "Crates",
                            "Open",
                            {["Name"] = getgenv().Crate}
                        ) do
                            table.insert(table1, ah)
                        end
                        if readfile(fileprefix .. "Webhook (Logs).txt") ~= "WEBHOOK HERE" then
                            url = readfile(fileprefix .. "Webhook (Logs).txt")
                            local ad = {
                                ["username"] = "TDS AutoStrat LOGGER",
                                ["embeds"] = {
                                    {
                                        ["title"] = "**LOG (" ..
                                            TimeConverter(os.date("*t").year) ..
                                                "-" ..
                                                    TimeConverter(os.date("*t").month) ..
                                                        "-" ..
                                                            TimeConverter(os.date("*t").day) ..
                                                                " " ..
                                                                    TimeConverter(os.date("*t").hour) ..
                                                                        ":" ..
                                                                            TimeConverter(os.date("*t").min) ..
                                                                                ":" ..
                                                                                    TimeConverter(os.date("*t").sec) ..
                                                                                        ")**",
                                        ["description"] = "**		------------ OPENED CRATE ------------**\n**Troop : **" ..
                                            table1[2] ..
                                                "\n**Skin : **" ..
                                                    table1[4] ..
                                                        "\n**Skin Rarity : **" ..
                                                            table1[3] .. "\n**Skin Price : **" .. tostring(table1[1]),
                                        ["type"] = "rich",
                                        ["color"] = tonumber(16744448)
                                    }
                                }
                            }
                            local ai = game:GetService("HttpService"):JSONEncode(ad)
                            local aj = {["content-type"] = "application/json"}
                            request = http_request or request or HttpPost or syn.request
                            local ak = {Url = url, Body = ai, Method = "POST", Headers = aj}
                            request(ak)
                            print("Webhook sent")
                        end
                    end
                end
            else
                warn(getgenv().Crate .. " Crate is for robux!")
            end
        end
    end
    b("Auto buy creates loaded")
    function sell(al)
        if isgame() then
            repeat
                task.wait()
            until game.Workspace.Towers:FindFirstChild(tostring(al))
            h:InvokeServer("Troops", "Sell", {["Troop"] = game.Workspace.Towers[tostring(al)]})
        end
    end
    function getTroopTypeCheck(al)
        return al.Replicator:GetAttribute("Type")
    end
    function getTroopType(am)
        local aa = getTroopTypeCheck(am)
        if aa then
            return aa
        else
            return "Unable to GET"
        end
    end
    function EquipTroop(al)
        if not al or al == "Nil" then
            al = "nil"
        end
        if tostring(al) ~= "nil" and table.find(getgenv().troops5, tostring(al)) == nil then
            game.Players.LocalPlayer:Kick(
                "\n\n---------- AUTO STRAT ----------\n\nError 2:\nYou don't own " ..
                    tostring(al) .. " troop.\n\n---------- AUTO STRAT ----------\n"
            )
            task.wait(0.5)
            while true do
            end
        end
        i:FireServer("Inventory", "Equip", "tower", al)
        if not getgenv().GoldenPerks then
            getgenv().GoldenPerks = {}
        end
        if table.find(getgenv().GoldenPerks, al) then
            h:InvokeServer("Inventory", "Equip", "Golden", al)
        else
            h:InvokeServer("Inventory", "Unequip", "Golden", al)
        end
        getgenv().status = "Equipped " .. al
    end
    function CheckTroop(al)
        if not al or al == "Nil" then
            al = "nil"
        end
        if tostring(al) ~= "nil" and table.find(getgenv().troops5, tostring(al)) == nil then
            game.Players.LocalPlayer:Kick(
                "\n\n---------- AUTO STRAT ----------\n\nError 2:\nYou don't own " ..
                    tostring(al) .. " troop.\n\n---------- AUTO STRAT ----------\n"
            )
            task.wait(0.5)
            while true do
            end
        end
    end
    function skip()
        if isgame() then
            h:InvokeServer("Waves", "Skip")
            getgenv().output("Skipped Wave")
        end
    end
    function conv(an, ao)
        local ap = an
        local aq = ao * 60
        local ap = ap + aq
        return ap
    end
    writefile(fileprefix .. "LastPrintLog.txt", "")
    function prints(ar)
        appendfile(fileprefix .. "LastPrintLog.txt", tostring(ar) .. "\n")
        print(tostring(ar))
    end
    function ability(al, as)
        if isgame() then
            repeat
                task.wait()
            until game.Workspace.Towers:FindFirstChild(tostring(al))
            h:InvokeServer(
                "Troops",
                "Abilities",
                "Activate",
                {["Troop"] = game.Workspace.Towers[tostring(al)], ["Name"] = as}
            )
            getgenv().output(
                "Used Ability (Troop " ..
                    getTroopType(game.Workspace.Towers[tostring(al)]) ..
                        " With Number " .. tostring(al) .. " Ability " .. as .. ")"
            )
        end
    end
    writefile(fileprefix .. "LastStrat_" .. d .. ".txt", "")
    if getgenv().PotatoPC then
        appendfile(fileprefix .. "LastStrat_" .. d .. ".txt", "getgenv().PotatoPC = true\n")
    end
    if getgenv().Debug then
        appendfile(fileprefix .. "LastStrat_" .. d .. ".txt", "getgenv().Debug = true\n")
    end
    b("Required functions loaded")
    if getgenv().GoldenPerks then
        generateline = "getgenv().GoldenPerks = {"
        for e = 1, #getgenv().GoldenPerks do
            generateline = generateline .. '"' .. getgenv().GoldenPerks[e] .. '",'
        end
        generateline = generateline .. "}\n"
        appendfile(fileprefix .. "LastStrat_" .. d .. ".txt", generateline)
    end
    b("Golden perks added")
    appendfile(
        fileprefix .. "LastStrat_" .. d .. ".txt",
        'local TDS = loadstring(game:HttpGet("https://raw.githubusercontent.com/banbuskox/dfhtyxvzexrxgfdzgzfdvfdz/main/ckmhjvskfkmsStratFun2", true))()\n'
    )
    function a:Map(at, au, av)
        appendfile(
            fileprefix .. "LastStrat_" .. d .. ".txt",
            "TDS:Map('" .. at .. "', " .. tostring(au) .. ", '" .. av .. "')\n"
        )
        getgenv().mapc = at
        if getgenv().Multiplayer and getgenv().PlayerType == "Player" then
            getgenv().status = "Host control mode..."
        end
        if not getgenv().Multiplayer or getgenv().Multiplayer and getgenv().PlayerType == "Host" then
            if av == "Hardcore" and game:GetService("Players").LocalPlayer.Level.Value < 50 then
                game.Players.LocalPlayer:Kick(
                    "\n\n---------- AUTO STRAT ----------\n\nError 4:\nYou are not level 50!\nYou can't use Hardcore Mode strats!\n\n---------- AUTO STRAT ----------\n"
                )
                task.wait(0.5)
                while true do
                end
            end
            local aw = 1
            if not isgame() and getgenv().Multiplayer and getgenv().PlayerType == "Host" then
                aw = getgenv().PlayerNumber
                repeat
                    getgenv().status = "Waiting for plrs..."
                    task.wait()
                until getgenv().FindMap
            end
            if isgame() and game:GetService("ReplicatedStorage").State.Map.Value ~= at and not getgenv().Multiplayer then
                game:GetService("TeleportService"):Teleport(3260590327)
            end
            getgenv().timer = 0
            spawn(
                function()
                    if not isgame() and not getgenv().IsMultiStrat then
                        spawn(
                            function()
                                getgenv().timer = 0
                                while task.wait(1) do
                                    getgenv().timer = getgenv().timer + 1
                                end
                            end
                        )
                        getgenv().repeating = true
                        while task.wait(1) do
                            if getgenv().repeating then
                                getgenv().repeating = false
                                local ax = 0
                                for u, ay in pairs(game:GetService("Workspace").Elevators:GetChildren()) do
                                    local az = ay.State.Map.Title
                                    local aA = require(ay.Settings).Type
                                    local aB = ay.State.Players
                                    if av == nil then
                                        av = "Survival"
                                    end
                                    if az.Value == at and aA == av then
                                        if aB.Value <= 0 then
                                            ax = ax + 1
                                            prints("Join attempt...")
                                            getgenv().status = "Joining..."
                                            h:InvokeServer("Elevators", "Enter", ay)
                                            prints("Joined elavator...")
                                            getgenv().status = "Joined"
                                            if getgenv().Multiplayer and getgenv().Connection then
                                                getgenv().Connection:Send(
                                                    '{"client":"Host","action":"Elevator","number":' ..
                                                        tostring(u) ..
                                                            ',"userId":' ..
                                                                game.Players.LocalPlayer.UserId ..
                                                                    ',"playerTwoId":' ..
                                                                        getgenv().Player2Id ..
                                                                            ',"playerThreeId":' ..
                                                                                getgenv().Player3Id ..
                                                                                    ',"playerFourId":' ..
                                                                                        getgenv().Player4Id .. "}"
                                                )
                                            end
                                            while task.wait() do
                                                getgenv().status = "Joined (" .. ay.State.Timer.Value .. "s)"
                                                if ay.State.Timer.Value == 0 then
                                                    local aC = true
                                                    for e = 1, 100 do
                                                        if au and aB.Value > aw then
                                                            if getgenv().Multiplayer and getgenv().Connection then
                                                                getgenv().Connection:Send(
                                                                    '{"client":"Host","action":"LElevator","userId":' ..
                                                                        game.Players.LocalPlayer.UserId ..
                                                                            ',"playerTwoId":' ..
                                                                                getgenv().Player2Id ..
                                                                                    ',"playerThreeId":' ..
                                                                                        getgenv().Player3Id ..
                                                                                            ',"playerFourId":' ..
                                                                                                getgenv().Player4Id ..
                                                                                                    "}"
                                                                )
                                                            end
                                                            prints("Someone joined, leaving elevator...")
                                                            getgenv().status = "Someone joined..."
                                                            h:InvokeServer("Elevators", "Leave")
                                                            getgenv().repeating = true
                                                            aC = false
                                                            break
                                                        end
                                                        task.wait(0.01)
                                                    end
                                                    if ay.State.Timer.Value == 0 and aC then
                                                        getgenv().status = "Teleporting..."
                                                        task.wait(60)
                                                        getgenv().status = "Teleport failed!"
                                                        h:InvokeServer("Elevators", "Leave")
                                                        if getgenv().Multiplayer and getgenv().Connection then
                                                            getgenv().Connection:Send(
                                                                '{"client":"Host","action":"LElevator","userId":' ..
                                                                    game.Players.LocalPlayer.UserId ..
                                                                        ',"playerTwoId":' ..
                                                                            getgenv().Player2Id ..
                                                                                ',"playerThreeId":' ..
                                                                                    getgenv().Player3Id ..
                                                                                        ',"playerFourId":' ..
                                                                                            getgenv().Player4Id .. "}"
                                                            )
                                                        end
                                                    else
                                                        if getgenv().Multiplayer and getgenv().Connection then
                                                            getgenv().Connection:Send(
                                                                '{"client":"Host","action":"LElevator","userId":' ..
                                                                    game.Players.LocalPlayer.UserId ..
                                                                        ',"playerTwoId":' ..
                                                                            getgenv().Player2Id ..
                                                                                ',"playerThreeId":' ..
                                                                                    getgenv().Player3Id ..
                                                                                        ',"playerFourId":' ..
                                                                                            getgenv().Player4Id .. "}"
                                                            )
                                                        end
                                                        getgenv().status = "Teleport failed! (Timer)"
                                                        h:InvokeServer("Elevators", "Leave")
                                                        getgenv().repeating = true
                                                    end
                                                end
                                                if az.Value == at then
                                                    if au then
                                                        if aB.Value > aw then
                                                            if getgenv().Multiplayer and getgenv().Connection then
                                                                getgenv().Connection:Send(
                                                                    '{"client":"Host","action":"LElevator","userId":' ..
                                                                        game.Players.LocalPlayer.UserId ..
                                                                            ',"playerTwoId":' ..
                                                                                getgenv().Player2Id ..
                                                                                    ',"playerThreeId":' ..
                                                                                        getgenv().Player3Id ..
                                                                                            ',"playerFourId":' ..
                                                                                                getgenv().Player4Id ..
                                                                                                    "}"
                                                                )
                                                            end
                                                            h:InvokeServer("Elevators", "Leave")
                                                            prints("Someone joined, leaving elevator...")
                                                            getgenv().status = "Someone joined..."
                                                            getgenv().repeating = true
                                                            break
                                                        elseif aB.Value == 0 then
                                                            task.wait(1)
                                                            if aB.Value == 0 then
                                                                task.wait(1)
                                                                if aB.Value == 0 then
                                                                    task.wait(1)
                                                                    if aB.Value == 0 then
                                                                        task.wait(1)
                                                                        if aB.Value == 0 then
                                                                            if
                                                                                getgenv().Multiplayer and
                                                                                    getgenv().Connection
                                                                             then
                                                                                getgenv().Connection:Send(
                                                                                    '{"client":"Host","action":"LElevator","userId":' ..
                                                                                        game.Players.LocalPlayer.UserId ..
                                                                                            ',"playerTwoId":' ..
                                                                                                getgenv().Player2Id ..
                                                                                                    ',"playerThreeId":' ..
                                                                                                        getgenv().Player3Id ..
                                                                                                            ',"playerFourId":' ..
                                                                                                                getgenv(

                                                                                                                ).Player4Id ..
                                                                                                                    "}"
                                                                                )
                                                                            end
                                                                            prints("Error")
                                                                            getgenv().status =
                                                                                "Error occured, check dev con"
                                                                            prints(
                                                                                "Error occured, please open ticket on Money Maker Development discord server!"
                                                                            )
                                                                            h:InvokeServer("Elevators", "Leave")
                                                                            getgenv().repeating = true
                                                                            break
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end
                                                else
                                                    h:InvokeServer("Elevators", "Leave")
                                                    prints("Map changed while joining, leaving...")
                                                    if getgenv().Multiplayer and getgenv().Connection then
                                                        getgenv().Connection:Send(
                                                            '{"client":"Host","action":"LElevator","userId":' ..
                                                                game.Players.LocalPlayer.UserId ..
                                                                    ',"playerTwoId":' ..
                                                                        getgenv().Player2Id ..
                                                                            ',"playerThreeId":' ..
                                                                                getgenv().Player3Id ..
                                                                                    ',"playerFourId":' ..
                                                                                        getgenv().Player4Id .. "}"
                                                        )
                                                    end
                                                    getgenv().status = "Map changed..."
                                                    getgenv().repeating = true
                                                    break
                                                end
                                            end
                                        end
                                    end
                                end
                                if ax == 0 then
                                    getgenv().repeating = true
                                    prints("Waiting for map...")
                                    getgenv().status = "Waiting for map..."
                                    if getgenv().timer >= 15 then
                                        getgenv().status = "Force changing maps..."
                                        getgenv().timer = 0
                                        for j, k in pairs(game:GetService("Workspace").Elevators:GetChildren()) do
                                            local aA = require(k.Settings).Type
                                            local aB = k.State.Players
                                            if aA == av and aB.Value <= 0 then
                                                h:InvokeServer("Elevators", "Enter", k)
                                                task.wait(1)
                                                h:InvokeServer("Elevators", "Leave")
                                            end
                                        end
                                        task.wait(0.6)
                                        h:InvokeServer("Elevators", "Leave")
                                        if getgenv().Multiplayer and getgenv().Connection then
                                            getgenv().Connection:Send(
                                                '{"client":"Host","action":"LElevator","userId":' ..
                                                    game.Players.LocalPlayer.UserId ..
                                                        ',"playerTwoId":' ..
                                                            getgenv().Player2Id ..
                                                                ',"playerThreeId":' ..
                                                                    getgenv().Player3Id ..
                                                                        ',"playerFourId":' .. getgenv().Player4Id .. "}"
                                            )
                                        end
                                        task.wait(1)
                                    end
                                end
                            end
                        end
                    end
                end
            )
        end
    end
    b("Loaded map library")
    if not isfolder("TDS_AutoStrat") and not isfile(fileprefix .. "Webhook (Logs).txt") then
        makefolder("TDS_AutoStrat")
        writefile(fileprefix .. "Webhook (Logs).txt", "WEBHOOK HERE")
    end
    writefile("ulszcszu.txt", "KxjhVghCJH")
    if isgame() then
        spawn(
            function()
                while task.wait() do
                    game:GetService("Players").LocalPlayer.PlayerGui.LoadingGui.Enabled = false
                end
            end
        )
    end
    local function aD()
        getgenv().actionsSupposedToBeUsed = getgenv().actionsSupposedToBeUsed + 1
    end
    local function aE()
        getgenv().actionsUsed = getgenv().actionsUsed + 1
    end
    function a:Mode(aF)
        appendfile(fileprefix .. "LastStrat_" .. d .. ".txt", "TDS:Mode('" .. aF .. "')\n")
        aD()
        task.wait(5)
        if isgame() then
            spawn(
                function()
                    local aG = nil
                    repeat
                        aG = h:InvokeServer("Difficulty", "Vote", aF)
                        task.wait()
                    until aG
                    getgenv().output("Selected Mode (Mode " .. aF .. ")")
                    aE()
                end
            )
        end
        b("Mode set")
    end
    b("Loaded mode library")
    function a:Loadout(aH, aI, aJ, aK, aL)
        getgenv().MapUsed = true
        if aH == nil then
            aH = "nil"
        end
        if aI == nil then
            aI = "nil"
        end
        if aJ == nil then
            aJ = "nil"
        end
        if aK == nil then
            aK = "nil"
        end
        if aL == nil then
            aL = "nil"
        end
        appendfile(
            fileprefix .. "LastStrat_" .. d .. ".txt",
            "TDS:Loadout('" .. aH .. "', '" .. aI .. "', '" .. aJ .. "', '" .. aK .. "', '" .. aL .. "')\n"
        )
        getgenv().status = "Equipping Loadout..."
        getgenv().TroopNameNEW = aH
        getgenv().TroopName2NEW = aI
        getgenv().TroopName3NEW = aJ
        getgenv().TroopName4NEW = aK
        getgenv().TroopName5NEW = aL
        getgenv().troops5 = {}
        for j, k in next, game.ReplicatedStorage.RemoteFunction:InvokeServer("Session", "Search", "Inventory.Troops") do
            table.insert(getgenv().troops5, j)
        end
        CheckTroop(aH)
        CheckTroop(aI)
        CheckTroop(aJ)
        CheckTroop(aK)
        CheckTroop(aL)
        if not isgame() and not getgenv().IsMultiStrat then
            local aM = 0
            for ag, ah in next, game.ReplicatedStorage.RemoteFunction:InvokeServer(
                "Session",
                "Search",
                "Inventory.Troops"
            ) do
                if ah.Equipped then
                    if ag ~= aH and ag ~= aI and ag ~= aJ and ag ~= aK and ag ~= aL then
                        game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(
                            "Inventory",
                            "Unequip",
                            "Tower",
                            ag
                        )
                        getgenv().status = "Removed " .. ag
                    else
                        aM = aM + 1
                    end
                end
            end
            if aM ~= 5 then
                EquipTroop(aH)
                EquipTroop(aI)
                EquipTroop(aJ)
                EquipTroop(aK)
                EquipTroop(aL)
            end
            getgenv().status = "Loadout Equipped"
        end
        b("Loadout equipped")
    end
    b("Loaded loadout library")
    getgenv().Placing = false
    getgenv().Upgrading = false
    local function aN(a3)
        if string.split(tostring(a3), ".")[2] then
            return tonumber("0." .. string.split(tostring(a3), ".")[2])
        else
            return 0
        end
    end
    local function aO(a3)
        if string.split(tostring(a3), ".")[1] then
            return tonumber(string.split(tostring(a3), ".")[1])
        else
            return 0
        end
    end
    b("Decimals functions loaded")
    local function aP(aQ, aR)
        local aS = aO(aR)
        repeat
            task.wait()
        until tonumber(stateRep:GetAttribute("Wave")) == aQ or getgenv().AbortThisShit
        repeat
            task.wait()
        until g.State.Timer.Time.Value == aS and game.Workspace:FindFirstChild("PathArrow") or getgenv().AbortThisShit
    end
    b("Inbetween waves loaded")
    function a:Place(al, aT, aU, aV, aQ, ao, an, aW, aX, aY, aZ, a_)
        spawn(
            function()
                if not aW then
                    aW = false
                end
                b("Rot arg got")
                if aW then
                    appendfile(
                        fileprefix .. "LastStrat_" .. d .. ".txt",
                        "TDS:Place('" ..
                            al ..
                                "', " ..
                                    aT ..
                                        ", " ..
                                            aU ..
                                                ", " ..
                                                    aV ..
                                                        ", " ..
                                                            aQ ..
                                                                ", " ..
                                                                    ao ..
                                                                        ", " ..
                                                                            an ..
                                                                                ", " ..
                                                                                    tostring(aW) ..
                                                                                        ", " ..
                                                                                            aX ..
                                                                                                ", " ..
                                                                                                    aY ..
                                                                                                        ", " ..
                                                                                                            aZ ..
                                                                                                                ", " ..
                                                                                                                    tostring(
                                                                                                                        a_ or
                                                                                                                            "false"
                                                                                                                    ) ..
                                                                                                                        ")\n"
                    )
                else
                    appendfile(
                        fileprefix .. "LastStrat_" .. d .. ".txt",
                        "TDS:Place('" ..
                            al ..
                                "', " ..
                                    aT ..
                                        ", " ..
                                            aU ..
                                                ", " ..
                                                    aV ..
                                                        ", " ..
                                                            aQ ..
                                                                ", " ..
                                                                    ao ..
                                                                        ", " ..
                                                                            an ..
                                                                                ", false, 0, 0, 0, " ..
                                                                                    tostring(a_ or "false") .. ")\n"
                    )
                end
                b("Place added to strat")
                if isgame() then
                    b("Game")
                    if not a_ then
                        b("Waiting to place normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Placing normal")
                    else
                        b("Waiting to place between")
                        aP(aQ, an)
                        b("Placing between")
                    end
                    aD()
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    wait(aN(an))
                    local b0 = nil
                    local b1 = 0
                    b("Placing troop")
                    local b2 = 0

                    repeat
                        task.wait()
                    until game.Players.LocalPlayer.Cash.Value >= require(game.ReplicatedStorage.Assets.Troops[al].Stats).Price

                    repeat
                        if aW then
                            b0 =
                                h:InvokeServer(
                                "Troops",
                                "Place",
                                al,
                                {["Rotation"] = CFrame.new(aX, aY, aZ), ["Position"] = Vector3.new(aT, aU, aV)}
                            )
                        elseif not aW then
                            b0 =
                                h:InvokeServer(
                                "Troops",
                                "Place",
                                al,
                                {
                                    ["Rotation"] = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1),
                                    ["Position"] = Vector3.new(aT, aU, aV)
                                }
                            )
                        end
                        if b2 > 1 and getgenv().Debug then
                            getgenv().output(
                                "Failed placing " .. al .. " on coords " .. table.concat({aT, aU, aV}, ", "),
                                Color3.fromRGB(0, 132, 255)
                            )
                        end
                        b2 = b2 + 1
                    until b0
                    aE()
                    getgenv().output("Placed " .. al)
                    b("Troop placed")
                end
            end
        )
    end
    b("Placing library loaded")
    function a:Upgrade(b3, aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:Upgrade(" ..
                        b3 .. ", " .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    local al = b3
                    if not a_ then
                        b("Upgrade normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) and
                            game.Workspace.Towers:FindFirstChild(tostring(al)) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) and
                                game.Workspace.Towers:FindFirstChild(tostring(al)) or
                            getgenv().AbortThisShit
                        b("Upgrading normal")
                    else
                        b("Upgrade between")
                        aP(aQ, an)
                        b("Upgrading between")
                    end
                    aD()
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    if not game.Workspace.Towers:FindFirstChild(tostring(al)) then
                        getgenv().output("Warning! Troop with id " .. al .. " has not been placed!")
                    end
                    local b2 = 0
                    b("Upgrading troop")
                    local b4 = nil
                    repeat
                        b4 =
                            h:InvokeServer(
                            "Troops",
                            "Upgrade",
                            "Set",
                            {["Troop"] = game.Workspace.Towers:WaitForChild(tostring(al))}
                        )
                        if b2 > 1 and getgenv().Debug then
                            getgenv().output("Failed placing " .. al, Color3.fromRGB(0, 132, 255))
                        end
                        b2 = b2 + 1
                    until b4
                    aE()
                    getgenv().output(
                        "Upgraded (Troop " ..
                            getTroopType(game.Workspace.Towers[tostring(b3)]) .. " With Number " .. tostring(al) .. ")"
                    )
                    b("Troop upgraded")
                end
            end
        )
    end
    b("Upgrade library loaded")
    function a:Sell(b3, aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:Sell(" ..
                        b3 .. ", " .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Selling normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Sold normal")
                    else
                        b("Selling between")
                        aP(aQ, an)
                        b("Sold between")
                    end
                    aD()
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Selling troop")
                    getgenv().output(
                        "Sold (Troop " ..
                            getTroopType(game.Workspace.Towers[tostring(b3)]) .. " With Number " .. tostring(b3) .. ")"
                    )
                    sell(b3)
                    aE()
                    b("Troop sold")
                end
            end
        )
    end
    b("Sell library loaded")
    function a:Skip(aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:Skip(" .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Skipping normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Skipped normal")
                    else
                        b("Skipping between")
                        aP(aQ, an)
                        b("Skipped between")
                    end
                    aD()
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Skipping")
                    skip()
                    aE()
                    b("Skipped")
                end
            end
        )
    end
    b("Loaded skip library")
    function a:Ability(b3, as, aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:Ability(" ..
                        b3 ..
                            ', "' ..
                                as ..
                                    '", ' .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Abiliting normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Abilited normal")
                    else
                        b("Abiliting between")
                        aP(aQ, an)
                        b("Abilited between")
                    end
                    aD()
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Abiliting")
                    ability(b3, as)
                    aE()
                    b("Abilited")
                end
            end
        )
    end
    b("Loaded ability library")
    function a:AutoChain(b5, b6, b7, aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:AutoChain(" ..
                        b5 ..
                            ", " ..
                                b6 ..
                                    ", " ..
                                        b7 ..
                                            ", " ..
                                                aQ ..
                                                    ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Autochaining normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Autochained normal")
                    else
                        b("Autochaining between")
                        aP(aQ, an)
                        b("Autochained between")
                    end
                    aD()
                    wait(aN(an))
                    b("Waiting for autochain troops")
                    repeat
                        task.wait()
                    until game:GetService("Workspace").Towers:FindFirstChild(tostring(b5)) or getgenv().AbortThisShit
                    repeat
                        task.wait()
                    until game:GetService("Workspace").Towers:FindFirstChild(tostring(b6)) or getgenv().AbortThisShit
                    repeat
                        task.wait()
                    until game:GetService("Workspace").Towers:FindFirstChild(tostring(b7)) or getgenv().AbortThisShit
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Checking commanders")
                    if getTroopType(game.Workspace.Towers[tostring(b5)]) ~= "Commander" then
                        getgenv().output("Error, troop with id " .. b5 .. " is not Commander!")
                    end
                    if getTroopType(game.Workspace.Towers[tostring(b6)]) ~= "Commander" then
                        getgenv().output("Error, troop with id " .. b6 .. " is not Commander!")
                    end
                    if getTroopType(game.Workspace.Towers[tostring(b7)]) ~= "Commander" then
                        getgenv().output("Error, troop with id " .. b7 .. " is not Commander!")
                    end
                    b("Starting autochain")
                    function Act(b8)
                        if game:GetService("Workspace").Towers:FindFirstChild(tostring(b8)) then
                            local ah = game:GetService("Workspace").Towers:FindFirstChild(tostring(b8))
                            if
                                not ah.Replicator.Stuns:GetAttribute("1") and not ah.Replicator.Stuns:GetAttribute("2") and
                                    not ah.Replicator.Stuns:GetAttribute("3")
                             then
                                game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(
                                    "Troops",
                                    "Abilities",
                                    "Activate",
                                    {
                                        ["Troop"] = game:GetService("Workspace").Towers:FindFirstChild(tostring(b8)),
                                        ["Name"] = "Call Of Arms"
                                    }
                                )
                            else
                                getgenv().output("Detected stun on commander " .. tostring(b8) .. ", waiting...")
                                repeat
                                    task.wait()
                                until not ah.Replicator.Stuns:GetAttribute("1") and
                                    not ah.Replicator.Stuns:GetAttribute("2") and
                                    not ah.Replicator.Stuns:GetAttribute("3")
                                game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer(
                                    "Troops",
                                    "Abilities",
                                    "Activate",
                                    {
                                        ["Troop"] = game:GetService("Workspace").Towers:FindFirstChild(tostring(b8)),
                                        ["Name"] = "Call Of Arms"
                                    }
                                )
                            end
                        else
                            getgenv().output("Commander " .. tostring(b8) .. " removed, aborting AutoChain...")
                            getgenv().breaks = true
                        end
                    end
                    getgenv().output(
                        "Activated AutoChain (Troops " ..
                            tostring(b5) .. ", " .. tostring(b6) .. ", " .. tostring(b7) .. ")"
                    )
                    b("Autochain started")
                    aE()
                    while task.wait() do
                        if getgenv().breaks then
                            break
                        end
                        Act(b5)
                        task.wait(10.01)
                        Act(b6)
                        task.wait(10.01)
                        Act(b7)
                        task.wait(10.01)
                    end
                    getgenv().breaks = false
                end
            end
        )
    end
    b("Autochain library loaded")
    function a:Target(b3, aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:Target(" ..
                        b3 .. ", " .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Targetting normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Targetted normal")
                    else
                        b("Targetting between")
                        aP(aQ, an)
                        b("Targetted between")
                    end
                    aD()
                    b("Checking troop")
                    repeat
                        task.wait()
                    until game.Workspace.Towers:FindFirstChild(tostring(b3)) or getgenv().AbortThisShit
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Setting target")
                    h:InvokeServer(
                        "Troops",
                        "Target",
                        "Set",
                        {["Troop"] = game.Workspace.Towers:WaitForChild(tostring(b3))}
                    )
                    aE()
                    getgenv().output(
                        "Changed Target (Troop " ..
                            getTroopType(game.Workspace.Towers[tostring(b3)]) .. " With Number " .. tostring(b3) .. ")"
                    )
                    b("Target set to troop")
                end
            end
        )
    end
    b("Target library loaded")
    function a:SellAllFarms(aQ, ao, an, a_)
        spawn(
            function()
                appendfile(
                    fileprefix .. "LastStrat_" .. d .. ".txt",
                    "TDS:SellAllFarms(" .. aQ .. ", " .. ao .. ", " .. an .. ", " .. tostring(a_ or "false") .. ")\n"
                )
                if isgame() then
                    if not a_ then
                        b("Selling all farms normal")
                        repeat
                            task.wait()
                        until tonumber(stateRep:GetAttribute("Wave")) == aQ and
                            g.State.Timer.Time.Value == conv(aO(an), ao) or
                            tonumber(stateRep:GetAttribute("Wave")) == aQ and
                                g.State.Timer.Time.Value + 1 == conv(aO(an), ao) or
                            getgenv().AbortThisShit
                        b("Sold all farms normal")
                    else
                        b("Selling all farms between")
                        aP(aQ, an)
                        b("Sold all farm between")
                    end
                    aD()
                    wait(aN(an))
                    if getgenv().AbortThisShit then
                        return 0
                    end
                    b("Selling all farms")
                    for j, k in pairs(game.Workspace.Towers:GetChildren()) do
                        if getTroopType(k) == "Farm" and k.Owner.Value == game.Players.LocalPlayer.UserId then
                            h:InvokeServer("Troops", "Sell", {["Troop"] = k})
                            task.wait()
                        end
                    end
                    aE()
                    getgenv().output("Sold All Farms", Color3.fromRGB(255, 0, 0))
                    b("Sold all farms")
                end
            end
        )
    end
    spawn(
        function()
            repeat
                task.wait()
            until getgenv().StratCreditsAuthor
            appendfile(
                fileprefix .. "LastStrat_" .. d .. ".txt",
                "getgenv().StratCreditsAuthor = '" .. getgenv().StratCreditsAuthor .. "'\n"
            )
        end
    )
    if isgame() then
        did = false
        while task.wait() do
            for j, k in pairs(game.CoreGui:GetDescendants()) do
                if k:IsA("TextLabel") and k.Text == "Camera" then
                    k.Parent.Position = UDim2.new(0, 220, 0, 0)
                    did = true
                    break
                end
            end
            if did then
                break
            end
        end
    end
    spawn(
        function()
            if not game.Players.LocalPlayer:IsInGroup(4914494) then
                setclipboard("https://www.roblox.com/groups/4914494/Paradoxum-Games")
                game.Players.LocalPlayer:Kick(
                    "\n\n---------- AUTO STRAT ----------\n\nError 5:\nYou need to joing Paradoxum Games group in order to use autostrats (link copied to clipboard)\n\n---------- AUTO STRAT ----------\n"
                )
                task.wait(0.5)
                while true do
                end
            end
        end
    )
else
    function a:Map()
    end
    function a:Mode()
    end
    function a:Loadout()
    end
    function a:Place()
    end
    function a:Upgrade()
    end
    function a:Sell()
    end
    function a:Skip()
    end
    function a:Ability()
    end
    function a:AutoChain()
    end
    function a:Target()
    end
    function a:SellAllFarms()
    end
end
return a
