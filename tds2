local ids = 0

local TDS = {
	towers = {},
	staterep = nil,
	replicatorFolder = nil
}

local function getCash()
	if TDS.replicatorFolder then
		return TDS.replicatorFolder:GetAttribute("Cash")
	end
	
	for _, replicator in pairs(game:GetService("ReplicatedStorage").StateReplicators:GetChildren()) do
		if replicator:GetAttribute("UserId") == game.Players.LocalPlayer.UserId then
			TDS.replicatorFolder = replicator
			return TDS.replicatorFolder:GetAttribute("Cash")
		end
	end
end

function TDS:isGame()
	if game.PlaceId == 5591597781 then
		return true
	else
		return false
	end
end
function TDS:GetStateRep()
	if TDS.staterep then return TDS.staterep end
	
	repeat
		for j, k in pairs(game:GetService("ReplicatedStorage").StateReplicators:GetChildren()) do
			if k:GetAttribute("TimeScale") then
				TDS.staterep = k
			end
		end
	until TDS.staterep
	
	return TDS.staterep
end

function TDS:SellAllFarms()
	for i, v in pairs(TDS.towers) do
		local model = v
		if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("HumanoidRootPart"):FindFirstChild("Coin") and v:FindFirstChild("HumanoidRootPart"):FindFirstChild("Counter") and v:FindFirstChild("Worth") and v.Owner.Value == game.Players.LocalPlayer.UserId then
			TDS:Sell(i)
		end
	end
end

function TDS:Ability(id, abilityName, ...)
	local tower = TDS.towers[ids]
	if tower then
		repeat
			task.wait()
		until tick() >= tower:GetAttritubte("CanUseAbilityAfter")
		
		local towerName = tower:GetAttribute("Name")
		local debounce = tick() + require(game.ReplicatedStorage.Assets.Troops[towerName].Stats).Abilities[1].Debounce
		tower:SetAttribute("CanUseAbilityAfter", debounce)
		game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Troops", "Abilities", "Activate", {Troop = tower, Name = abilityName})
		print(string.format("Used ability for tower '%s' with an ID of %s", towerName, id))
	else
		warn(string.format("'%s' has not been placed! Unable to ability.", id))
	end
end
function TDS:AutoChain(id1, id2, id3)
	task.spawn(function()
		while task.wait() do
			TDS:Ability(id1, "Call Of Arms")
			task.wait(10.01)
			TDS:Ability(id2, "Call Of Arms")
			task.wait(10.01)
			TDS:Ability(id3, "Call Of Arms")
			task.wait(10.01)
		end
	end)
end

function TDS:Place(Name, PositionX, PositionY, PositionZ, wv1, wv2, wv3, customrotation, rotationa, rotationb, rotationc, ...)
	repeat
		task.wait()
	until getCash() >= require(game.ReplicatedStorage.Assets.Troops[Name].Stats).Price * game:GetService("ReplicatedStorage"):WaitForChild("State"):WaitForChild("PriceScale").Value
	
	local rotation = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	if customrotation then
		rotation = CFrame.new(rotationa, rotationb, rotationc)
	end
	
	local tower = game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Troops", "Place", Name, {["Rotation"] = rotation, ["Position"] = Vector3.new(PositionX, PositionY, PositionZ)})
	if tower and typeof(tower) == "Instance" then
		ids += 1
		tower:SetAttribute("Name", Name)
		tower:SetAttribute("customupgrade", 0)
		TDS.towers[ids] = tower
		
		print(string.format("Placed tower '%s' with an ID of %s", Name, ids))
	else
		game.ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(string.format("Unable to place tower '%s' which was supposed to have an ID of %s", Name, ids + 1),"All")
	end
end
function TDS:Upgrade(id, ...)
	local tower = TDS.towers[id]
	if tower then
		local towerName = tower:GetAttribute("Name")
		repeat
			task.wait()
		until getCash() >= require(game.ReplicatedStorage.Assets.Troops[towerName].Stats).Upgrades[tower:GetAttribute("customupgrade") + 1].Cost * game:GetService("ReplicatedStorage"):WaitForChild("State"):WaitForChild("PriceScale").Value
		
		tower:SetAttribute("customupgrade", tower:GetAttribute("customupgrade") + 1)
		game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Troops", "Upgrade", "Set", {Troop = tower})
		print(string.format("Upgraded tower '%s' with an ID of %s", towerName, id))
	else
		warn(string.format("'%s' has not been placed! Unable to upgrade.", id))
	end
end
function TDS:Skip(...)
	game.ReplicatedStorage.RemoteEvent:FireServer("Waves","Skip")
end
function TDS:Target(id, ...)
	local tower = TDS.towers[id]
	if tower then
		local towerName = tower:GetAttribute("Name")
		game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Troops", "Target", "Set", {Troop = tower})
		print(string.format("Targeted tower '%s' with an ID of %s", towerName, id))
	else
		warn(string.format("'%s' has not been placed! Unable to target.", id))
	end
end
function TDS:Sell(id)
	local tower = TDS.towers[id]
	if tower then
		local towerName = tower:GetAttribute("Name")
		game:GetService("ReplicatedStorage").RemoteFunction:InvokeServer("Troops", "Sell", {Troop = tower})
		TDS.towers[id] = nil
		print(string.format("Sold tower '%s' with an ID of %s", towerName, id))
	else
		warn(string.format("'%s' has not been placed! Unable to sell.", id))
	end
end

return TDS
